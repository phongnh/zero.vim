" NOTES:
" - All language regular expressions are ported from https://github.com/jacktasia/dumb-jump/blob/master/dumb-jump.el

let s:placeholder = '<%= placeholder %>'

let s:definitions = {
<% definitions.each do |language, rules| -%>
      \ '<%= language %>': {
<% rules.each do |key, regexes| -%>
      \   '<%= key %>': [
<% regexes.each do |regex| -%>
      \     <%= "'#{regex}'" %>,
<% end -%>
      \   ],
<% end -%>
      \ },
<% end -%>
      \ }

" rg --type-list
let s:rg_filetypes = {
<% rg_filetypes.each do |filetype, extensions| -%>
      \ '<%= filetype %>': [<%= extensions.map { |ext| "'#{ext}'" }.join(", ") %>],
<% end -%>
      \ }

" Map vim filetype to rg filetype
" - key: vim filetype 
" - value: rg filetype
let s:rg_filetype_mappings = {
      \ 'python':          'py',
      \ 'javascript':      'js',
      \ 'javascriptreact': 'js',
      \ 'typescript':      'ts',
      \ 'typescriptreact': 'ts',
      \ }

function! s:RgFileTypeOpts(...) abort
  let opts = []
  let ft = get(a:, 1, &filetype !=# '' ? &filetype : &buftype)
  let ft = get(s:rg_filetype_mappings, ft, ft)
  if strlen(ft) && has_key(s:rg_filetypes, ft)
    call add(opts, '-t ' . ft)
  else
    let ext = expand('%:e')
    if strlen(ext)
      call add(opts, '-g ' . shellescape(printf('*.{%s}', ext)))
    endif
  endif
  return opts
endfunction

function! s:GitFileTypeOpts(...) abort
  let opts = []
  let ft = get(a:, 1, &filetype !=# '' ? &filetype : &buftype)
  let ft = get(s:rg_filetype_mappings, ft, ft)
  if strlen(ft) && has_key(s:rg_filetypes, ft)
    call add(opts, '--')
    for ext in s:rg_filetypes[ft]
      call add(opts, shellescape(ext))
    endfor
  else
    let ext = expand('%:e')
    if strlen(ext)
      call add(opts, '--')
      call add(opts, shellescape(printf('*.{%s}', ext)))
    endif
  endif
  return opts
endfunction

function! s:Regexes(...) abort
  let ft = get(a:, 1, &filetype !=# '' ? &filetype : &buftype)
  if has_key(s:definitions, ft)
    let result = []
    for [type, regexes] in items(s:definitions[ft])
      call extend(result, regexes)
    endfor
    return result
  endif
  return []
endfunction

function! <%= namespace %>#Cword(...) abort
  let opts = ['i']
  let keyword = expand('<cword>')
  let patterns = map(s:Regexes(), { _, regex -> '(' . substitute(regex, s:placeholder, keyword, 'g') . ')' })
  call add(patterns, '(\b' . keyword . '\b)')
  call add(opts, shellescape('(' . join(patterns, '|') . ')'))
  return join(opts, ' ')
endfunction

function! <%= namespace %>#CwordRegex() abort
  let opts = ['i']
  let keyword = expand('<cword>')
  for regex in s:Regexes()
    let pattern = substitute(regex, s:placeholder, keyword, 'g')
    call add(opts, '-e ' . shellescape(pattern))
  endfor
  call add(opts, '-e ' . printf('''\b%s\b''', keyword))
  return join(opts, ' ')
endfunction

function! <%= namespace %>#RgCword() abort
  let opts = s:RgFileTypeOpts()
  let keyword = expand('<cword>')
  let patterns = map(s:Regexes(), { _, regex -> '(' . substitute(regex, s:placeholder, keyword, 'g') . ')' })
  call add(patterns, '(\b' . keyword . '\b)')
  call add(opts, shellescape('(' . join(patterns, '|') . ')'))
  return join(opts, ' ')
endfunction

function! <%= namespace %>#RgCwordRegex() abort
  let opts = s:RgFileTypeOpts()
  let keyword = expand('<cword>')
  for regex in s:Regexes()
    let pattern = substitute(regex, s:placeholder, keyword, 'g')
    call add(opts, '-e ' . shellescape(pattern))
  endfor
  call add(opts, '-e ' . printf('''\b%s\b''', keyword))
  return join(opts, ' ')
endfunction

function! <%= namespace %>#GitCword() abort
  let opts = ['-i']
  let keyword = expand('<cword>')
  let patterns = map(s:Regexes(), { _, regex -> '(' . substitute(regex, s:placeholder, keyword, 'g') . ')' })
  call add(patterns, '(\b' . keyword . '\b)')
  call add(opts, shellescape('(' . join(patterns, '|') . ')'))
  call extend(opts, s:GitFileTypeOpts())
  return join(opts, ' ')
endfunction

function! <%= namespace %>#GitCwordRegex() abort
  let opts = ['-i']
  let keyword = expand('<cword>')
  for regex in s:Regexes()
    let pattern = substitute(regex, s:placeholder, keyword, 'g')
    call add(opts, '-e ' . shellescape(pattern))
  endfor
  call add(opts, '-e ' . printf('''\b%s\b''', keyword))
  call extend(opts, s:GitFileTypeOpts())
  return join(opts, ' ')
endfunction
