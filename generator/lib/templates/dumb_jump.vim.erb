" NOTES:
" - All language regular expressions are ported from https://github.com/jacktasia/dumb-jump/blob/master/dumb-jump.el

let s:placeholder = '<%= placeholder %>'

let s:definitions = {
<% definitions.each do |language, regexes| -%>
      \ '<%= language %>': [
<% regexes.each do |regex| -%>
      \   <%= "'#{regex}'" %>,
<% end -%>
      \ ],
<% end -%>
      \ }

function! s:Regexes(...) abort
  let ft = get(a:, 1, &filetype !=# '' ? &filetype : &buftype)
  if has_key(s:definitions, ft)
    return s:definitions[ft]
  endif
  return []
endfunction

function! <%= namespace %>#Cword() abort
  let keyword = expand('<cword>')
  let patterns = []
  for regex in s:Regexes()
    call add(patterns, '(' . substitute(regex, s:placeholder, keyword, 'g') . ')')
  endfor
  if len(patterns)
    " call add(patterns, '(\b' . keyword . '\b)')
    " return shellescape('(' . join(patterns, '|') . ')')
    return "\"(" . join(patterns, '|') . ")\""
  endif
  return shellescape('\b' . keyword . '\b')
endfunction

function! <%= namespace %>#CwordRegex() abort
  let keyword = expand('<cword>')
  let patterns = []
  for regex in s:Regexes()
    call add(patterns, '-e ' . shellescape(substitute(regex, s:placeholder, keyword, 'g')))
  endfor
  if len(patterns)
    " call add(patterns, '-e ' . printf('''\b%s\b''', keyword))
    return join(patterns, ' ')
  endif
  return printf('''\b%s\b''', keyword)
endfunction

function! <%= namespace %>#RgCword() abort
  return '-s ' . join(zero#filetype#RgFileTypeOpts(), ' ') . ' ' . <%= namespace %>#Cword()
endfunction

function! <%= namespace %>#RgCwordRegex() abort
  return '-s ' . join(zero#filetype#RgFileTypeOpts(), ' ') . ' ' . <%= namespace %>#CwordRegex()
endfunction

function! <%= namespace %>#GitCword() abort
  return <%= namespace %>#Cword() . ' ' . join(zero#filetype#GitFileTypeOpts(), ' ')
endfunction

function! <%= namespace %>#GitCwordRegex() abort
  return <%= namespace %>#CwordRegex() . ' ' . join(zero#filetype#GitFileTypeOpts(), ' ')
endfunction
