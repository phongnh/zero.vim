" rg --type-list
let s:rg_filetypes = [
      \ 'ada',
      \ 'agda',
      \ 'aidl',
      \ 'alire',
      \ 'amake',
      \ 'asciidoc',
      \ 'asm',
      \ 'asp',
      \ 'ats',
      \ 'avro',
      \ 'awk',
      \ 'bat',
      \ 'batch',
      \ 'bazel',
      \ 'bitbake',
      \ 'brotli',
      \ 'buildstream',
      \ 'bzip2',
      \ 'c',
      \ 'cabal',
      \ 'candid',
      \ 'carp',
      \ 'cbor',
      \ 'ceylon',
      \ 'clojure',
      \ 'cmake',
      \ 'cmd',
      \ 'cml',
      \ 'coffeescript',
      \ 'config',
      \ 'coq',
      \ 'cpp',
      \ 'creole',
      \ 'crystal',
      \ 'cs',
      \ 'csharp',
      \ 'cshtml',
      \ 'csproj',
      \ 'css',
      \ 'csv',
      \ 'cuda',
      \ 'cython',
      \ 'd',
      \ 'dart',
      \ 'devicetree',
      \ 'dhall',
      \ 'diff',
      \ 'dita',
      \ 'docker',
      \ 'dockercompose',
      \ 'dts',
      \ 'dvc',
      \ 'ebuild',
      \ 'edn',
      \ 'elisp',
      \ 'elixir',
      \ 'elm',
      \ 'erb',
      \ 'erlang',
      \ 'fennel',
      \ 'fidl',
      \ 'fish',
      \ 'flatbuffers',
      \ 'fortran',
      \ 'fsharp',
      \ 'fut',
      \ 'gap',
      \ 'gn',
      \ 'go',
      \ 'gprbuild',
      \ 'gradle',
      \ 'graphql',
      \ 'groovy',
      \ 'gzip',
      \ 'h',
      \ 'haml',
      \ 'hare',
      \ 'haskell',
      \ 'hbs',
      \ 'hs',
      \ 'html',
      \ 'hy',
      \ 'idris',
      \ 'images',
      \ 'janet',
      \ 'java',
      \ 'jinja',
      \ 'jl',
      \ 'js',
      \ 'json',
      \ 'jsonl',
      \ 'julia',
      \ 'jupyter',
      \ 'k',
      \ 'kotlin',
      \ 'lean',
      \ 'less',
      \ 'license',
      \ 'lilypond',
      \ 'lisp',
      \ 'lock',
      \ 'log',
      \ 'lua',
      \ 'lz4',
      \ 'lzma',
      \ 'm4',
      \ 'make',
      \ 'mako',
      \ 'man',
      \ 'markdown',
      \ 'matlab',
      \ 'md',
      \ 'meson',
      \ 'minified',
      \ 'mint',
      \ 'mk',
      \ 'ml',
      \ 'motoko',
      \ 'msbuild',
      \ 'nim',
      \ 'nix',
      \ 'objc',
      \ 'objcpp',
      \ 'ocaml',
      \ 'org',
      \ 'pants',
      \ 'pascal',
      \ 'pdf',
      \ 'perl',
      \ 'php',
      \ 'po',
      \ 'pod',
      \ 'postscript',
      \ 'prolog',
      \ 'protobuf',
      \ 'ps',
      \ 'puppet',
      \ 'purs',
      \ 'py',
      \ 'python',
      \ 'qmake',
      \ 'qml',
      \ 'r',
      \ 'racket',
      \ 'rails',
      \ 'raku',
      \ 'rdoc',
      \ 'readme',
      \ 'reasonml',
      \ 'red',
      \ 'rescript',
      \ 'robot',
      \ 'rst',
      \ 'ruby',
      \ 'rust',
      \ 'sass',
      \ 'scala',
      \ 'sh',
      \ 'slim',
      \ 'smarty',
      \ 'sml',
      \ 'solidity',
      \ 'soy',
      \ 'spark',
      \ 'spec',
      \ 'sql',
      \ 'stylus',
      \ 'sv',
      \ 'svelte',
      \ 'svg',
      \ 'swift',
      \ 'swig',
      \ 'systemd',
      \ 'taskpaper',
      \ 'tcl',
      \ 'tex',
      \ 'texinfo',
      \ 'textile',
      \ 'tf',
      \ 'thrift',
      \ 'toml',
      \ 'ts',
      \ 'twig',
      \ 'txt',
      \ 'typescript',
      \ 'typoscript',
      \ 'usd',
      \ 'v',
      \ 'vala',
      \ 'vb',
      \ 'vcl',
      \ 'verilog',
      \ 'vhdl',
      \ 'vim',
      \ 'vimscript',
      \ 'vue',
      \ 'webidl',
      \ 'wgsl',
      \ 'wiki',
      \ 'xml',
      \ 'xz',
      \ 'yacc',
      \ 'yaml',
      \ 'yang',
      \ 'z',
      \ 'zig',
      \ 'zsh',
      \ 'zstd',
      \ ]

" Map vim filetype to rg filetype
" - key: vim filetype 
" - value: rg filetype
let s:rg_filetype_mappings = {
      \ 'python':          'py',
      \ 'javascript':      'js',
      \ 'javascriptreact': 'js',
      \ 'typescript':      'ts',
      \ 'typescriptreact': 'ts',
      \ }

function! zero#rg#get(...) abort
  let opts = []
  let ft = get(a:, 1, &filetype !=# '' ? &filetype : &buftype)
  let ft = get(s:rg_filetype_mappings, ft, ft)
  if strlen(ft) && index(s:rg_filetypes, ft) > -1
    call add(opts, '-t ' . ft)
  else
    let ext = expand('%:e')
    if strlen(ext)
      call add(opts, '-g ' . shellescape(printf('*.{%s}', ext)))
    endif
  endif
  return opts
endfunction
